name: Tests Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set Up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Install Go Releaser
        uses: goreleaser/goreleaser-action@v6
        with:
          install-only: true

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make
          sudo apt-get install -y build-essential

      - name: Run Makefile Targets
        run: |
          make build-all

      - name: Upload Freighter Binaries
        uses: actions/upload-artifact@v4
        with:
          name: freighter-binaries
          path: dist/*

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          sudo apt-get install -y tree

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: freighter-binaries
          path: dist

      - name: Prepare Freighter for Tests
        run: |
          pwd
          ls -la
          ls -la dist/
          chmod -R 755 dist/ testdata/certificate-script.sh
          sudo mv dist/freighter_linux_amd64_v1/freighter /usr/local/bin/freighter
          ./testdata/certificate-script.sh && sudo chown -R $(whoami) testdata/certs/

      - name: Verify - freighter version
        run: |
          freighter version

      - name: Verify - freighter completion
        run: |
          freighter completion
          freighter completion bash
          freighter completion fish
          freighter completion powershell
          freighter completion zsh

      - name: Verify - freighter help
        run: |
          freighter help

      - name: Verify - freighter login
        run: |
          freighter login --help
          freighter login docker.io --username ${{ secrets.DOCKERHUB_USERNAME }} --password ${{ secrets.DOCKERHUB_TOKEN }}
          echo ${{ secrets.GITHUB_TOKEN }} | freighter login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Remove Freighter Store Credentials
        run: |
          rm -rf ~/.docker/config.json

      - name: Verify - freighter store
        run: |
          freighter store --help

      - name: Verify - freighter store add
        run: |
          freighter store add --help

      - name: Verify - freighter store add chart
        run: |
          freighter store add chart --help
          # verify via helm repository
          freighter store add chart rancher --repo https://releases.rancher.com/server-charts/stable
          freighter store add chart rancher --repo https://releases.rancher.com/server-charts/stable --version 2.8.4
          freighter store add chart rancher --repo https://releases.rancher.com/server-charts/stable --version 2.8.3 --verify
          # verify via oci helm repository
          freighter store add chart freighter-helm --repo oci://ghcr.io/freighter-dev
          freighter store add chart freighter-helm --repo oci://ghcr.io/freighter-dev --version 1.0.6
          freighter store add chart freighter-helm --repo oci://ghcr.io/freighter-dev --version 1.0.4 --verify
          # verify via local helm repository
          curl -sfOL https://github.com/rancherfederal/rancher-cluster-templates/releases/download/rancher-cluster-templates-0.5.2/rancher-cluster-templates-0.5.2.tgz
          freighter store add chart rancher-cluster-templates-0.5.2.tgz --repo .
          curl -sfOL https://github.com/rancherfederal/rancher-cluster-templates/releases/download/rancher-cluster-templates-0.5.1/rancher-cluster-templates-0.5.1.tgz
          freighter store add chart rancher-cluster-templates-0.5.1.tgz --repo . --version 0.5.1
          curl -sfOL https://github.com/rancherfederal/rancher-cluster-templates/releases/download/rancher-cluster-templates-0.5.0/rancher-cluster-templates-0.5.0.tgz
          freighter store add chart rancher-cluster-templates-0.5.0.tgz --repo . --version 0.5.0 --verify
          # verify via the freighter store contents
          freighter store info

      - name: Verify - freighter store add file
        run: |
          freighter store add file --help
          # verify via remote file
          freighter store add file https://get.rke2.io/install.sh
          freighter store add file https://get.rke2.io/install.sh --name rke2-install.sh
          # verify via local file
          freighter store add file testdata/freighter-manifest.yaml
          freighter store add file testdata/freighter-manifest.yaml --name freighter-manifest-local.yaml
          # verify via the freighter store contents
          freighter store info

      - name: Verify - freighter store add image
        run: |
          freighter store add image --help
          # verify via image reference
          freighter store add image busybox
          # verify via image reference with version and platform
          freighter store add image busybox:stable --platform linux/amd64
          # verify via image reference with full reference
          freighter store add image gcr.io/distroless/base@sha256:7fa7445dfbebae4f4b7ab0e6ef99276e96075ae42584af6286ba080750d6dfe5
          # verify via the freighter store contents
          freighter store info

      - name: Verify - freighter store copy
        run: |
          freighter store copy --help
          # need more tests here

      - name: Verify - freighter store extract
        run: |
          freighter store extract --help
          # verify via extracting freighter store content
          freighter store extract freighter/freighter-manifest-local.yaml:latest
          # view extracted content from store
          cat freighter-manifest-local.yaml

      - name: Verify - freighter store info
        run: |
          freighter store info --help
          # verify via table output
          freighter store info --output table
          # verify via json output
          freighter store info --output json
          # verify via filtered output (chart)
          freighter store info --type chart
          # verify via filtered output (file)
          freighter store info --type file
          # verify via filtered output (image)
          freighter store info --type image
          # verify store directory structure
          tree -hC store

      - name: Verify - freighter store save
        run: |
          freighter store save --help
          # verify via save
          freighter store save
          # verify via save with filename
          freighter store save --filename store.tar.zst
          # verify via save with filename and platform (amd64)
          freighter store save --filename store-amd64.tar.zst --platform linux/amd64

      - name: Remove Freighter Store Contents
        run: |
          rm -rf store
          freighter store info

      - name: Verify - freighter store load
        run: |
          freighter store load --help
          # verify via load
          freighter store load
          # verify via load with multiple files
          freighter store load --filename haul.tar.zst --filename store.tar.zst
          # verify via load with filename and temp directory
          freighter store load --filename store.tar.zst --tempdir /opt
          # verify via load with filename and platform (amd64)
          freighter store load --filename store-amd64.tar.zst

      - name: Verify Freighter Store Contents
        run: |
          # verify store
          freighter store info
          # verify store directory structure
          tree -hC store

      - name: Verify - docker load
        run: |
          docker load --help
          # verify via load
          docker load --input store-amd64.tar.zst

      - name: Verify Docker Images Contents
        run: |
          docker images --help
          # verify images
          docker images --all

      - name: Remove Freighter Store Contents
        run: |
          rm -rf store haul.tar.zst store.tar.zst store-amd64.tar.zst
          freighter store info

      - name: Verify - freighter store sync
        run: |
          freighter store sync --help
          # download local helm repository
          curl -sfOL https://github.com/rancherfederal/rancher-cluster-templates/releases/download/rancher-cluster-templates-0.5.2/rancher-cluster-templates-0.5.2.tgz
          # verify via sync
          freighter store sync --filename testdata/freighter-manifest-pipeline.yaml
          # verify via sync with multiple files
          freighter store sync --filename testdata/freighter-manifest-pipeline.yaml --filename testdata/freighter-manifest.yaml
          # need more tests here

      - name: Verify - freighter store serve
        run: |
          freighter store serve --help

      - name: Verify - freighter store serve registry
        run: |
          freighter store serve registry --help
          # verify via registry
          freighter store serve registry &
          until curl -sf http://localhost:5000/v2/_catalog; do : ; done
          pkill -f "freighter store serve registry"
          # verify via registry with different port
          freighter store serve registry --port 5001 &
          until curl -sf http://localhost:5001/v2/_catalog; do : ; done
          pkill -f "freighter store serve registry --port 5001"
          # verify via registry with different port and readonly
          freighter store serve registry --port 5001 --readonly &
          until curl -sf http://localhost:5001/v2/_catalog; do : ; done
          pkill -f "freighter store serve registry --port 5001 --readonly"
          # verify via registry with different port with readonly with tls
          # freighter store serve registry --port 5001 --readonly --tls-cert testdata/certs/server-cert.crt --tls-key testdata/certs/server-cert.key &
          # until curl -sf --cacert testdata/certs/cacerts.pem https://localhost:5001/v2/_catalog; do : ; done
          # pkill -f "freighter store serve registry --port 5001 --readonly --tls-cert testdata/certs/server-cert.crt --tls-key testdata/certs/server-cert.key"

      - name: Verify - freighter store serve fileserver
        run: |
          freighter store serve fileserver --help
          # verify via fileserver
          freighter store serve fileserver &
          until curl -sf http://localhost:8080; do : ; done
          pkill -f "freighter store serve fileserver"
          # verify via fileserver with different port
          freighter store serve fileserver --port 8000 &
          until curl -sf http://localhost:8000; do : ; done
          pkill -f "freighter store serve fileserver --port 8000"
          # verify via fileserver with different port and timeout
          freighter store serve fileserver --port 8000 --timeout 120 &
          until curl -sf http://localhost:8000; do : ; done
          pkill -f "freighter store serve fileserver --port 8000 --timeout 120"
          # verify via fileserver with different port with timeout and tls
          # freighter store serve fileserver --port 8000 --timeout 120 --tls-cert testdata/certs/server-cert.crt --tls-key testdata/certs/server-cert.key &
          # until curl -sf --cacert testdata/certs/cacerts.pem https://localhost:8000; do : ; done
          # pkill -f "freighter store serve fileserver --port 8000 --timeout 120 --tls-cert testdata/certs/server-cert.crt --tls-key testdata/certs/server-cert.key"

      - name: Verify Freighter Store Contents
        run: |
          # verify store
          freighter store info
          # verify store directory structure
          tree -hC store
          # verify registry directory structure
          tree -hC registry
          # verify fileserver directory structure
          tree -hC fileserver

      - name: Create Freighter Report
        run: |
          freighter version >> freighter-report.txt
          freighter store info --output table >> freighter-report.txt

      - name: Remove Freighter Store Contents
        run: |
          rm -rf store registry fileserver
          freighter store info

      - name: Upload Freighter Report
        uses: actions/upload-artifact@v4
        with:
          name: freighter-report
          path: freighter-report.txt
